const { BinarySearchTree } = require('./binary-search-tree.js');

const tree = new BinarySearchTree();
tree.add(10);
tree.add(5);
tree.add(15);
tree.add(1);
tree.add(25);

console.log(tree.has(1))
console.log(tree.has(5))

//console.log(tree.find(25))
console.log('Root:', tree.root());

console.log(tree.remove(15));

console.log('Root:', tree.root());

console.log(tree.min())
console.log(tree.max())

/*
this.rootNode = {
  data: 10,
  left: {
    data: 8,
    left: {
      data: 6,
      left: null,
      right: null
    },
    right: null
  },
  right: null
};

let current = this.rootNode; // current.data = 10
current = current.left;      // current.data = 8
current = current.left;      // current.data = 6
*/

/*

  if (!current.right) {
    // –¢—ñ–ª—å–∫–∏ –ª—ñ–≤–∏–π –Ω–∞—â–∞–¥–æ–∫ ‚Äî –∫–æ–ø—ñ—é—î–º–æ –π–æ–≥–æ
    current.data = current.left.data;
    current.right = current.left.right;
    current.left = current.left.left;
    return current;
  }

 current.data = current.left.data;
- üîß –©–æ —Ä–æ–±–∏—Ç—å: –ö–æ–ø—ñ—é—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –ª—ñ–≤–æ–≥–æ –Ω–∞—â–∞–¥–∫–∞ –≤ –ø–æ—Ç–æ—á–Ω–∏–π –≤—É–∑–æ–ª.
- üß† –ù–∞–≤—ñ—â–æ: –ú–∏ –Ω–µ –≤–∏–¥–∞–ª—è—î–º–æ –≤—É–∑–æ–ª —Ñ—ñ–∑–∏—á–Ω–æ, –∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–º—ñ–Ω—é—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ –Ω–∞ –¥–∞–Ω—ñ –Ω–∞—â–∞–¥–∫–∞.
- üìê –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–æ: –¶–µ –¥–æ–∑–≤–æ–ª—è—î —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –≤—É–∑–ª–∞ ‚Äî –º–∏ –ø—Ä–æ—Å—Ç–æ "–ø–µ—Ä–µ–≤—Ç—ñ–ª—é—î–º–æ" –≤—É–∑–æ–ª.
       
  current.right = current.left.right;
- üîß –©–æ —Ä–æ–±–∏—Ç—å: –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∞—î –ø—Ä–∞–≤—É –≥—ñ–ª–∫—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—É–∑–ª–∞ –¥–æ –ø—Ä–∞–≤–æ—ó –≥—ñ–ª–∫–∏ –π–æ–≥–æ –ª—ñ–≤–æ–≥–æ –Ω–∞—â–∞–¥–∫–∞.
- üß† –ù–∞–≤—ñ—â–æ: –ú–∏ –∫–æ–ø—ñ—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É ‚Äî —è–∫—â–æ —É –ª—ñ–≤–æ–≥–æ –Ω–∞—â–∞–¥–∫–∞ –±—É–≤ –ø—Ä–∞–≤–∏–π –Ω–∞—â–∞–¥–æ–∫, –º–∏ –π–æ–≥–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ.
- üìê –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–æ: –¶–µ –∑–±–µ—Ä—ñ–≥–∞—î –ø—ñ–¥–¥–µ—Ä–µ–≤–æ, —è–∫–µ –±—É–ª–æ –ø—ñ–¥ –ª—ñ–≤–∏–º –Ω–∞—â–∞–¥–∫–æ–º
    
current.left = current.left.left;
- üîß –©–æ —Ä–æ–±–∏—Ç—å: –ü–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–∞—î –ª—ñ–≤—É –≥—ñ–ª–∫—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—É–∑–ª–∞ –¥–æ –ª—ñ–≤–æ—ó –≥—ñ–ª–∫–∏ –π–æ–≥–æ –ª—ñ–≤–æ–≥–æ –Ω–∞—â–∞–¥–∫–∞.
- üß† –ù–∞–≤—ñ—â–æ: –ó–∞–≤–µ—Ä—à—É—î–º–æ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ ‚Äî —Ç–µ–ø–µ—Ä current –º–∞—î —Ç—É –∂ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, —â–æ —ñ –π–æ–≥–æ –ª—ñ–≤–∏–π –Ω–∞—â–∞–¥–æ–∫.
- üìê –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–æ: –ú–∏ –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–º—ñ–Ω–∏–ª–∏ –≤—É–∑–æ–ª –Ω–∞ –π–æ–≥–æ –ª—ñ–≤–æ–≥–æ –Ω–∞—â–∞–¥–∫–∞, –≤–∫–ª—é—á–Ω–æ –∑ —É—Å—ñ–º–∞ –ø—ñ–¥–≥—ñ–ª–∫–∞–º–∏.

return current;
- - üîß –©–æ —Ä–æ–±–∏—Ç—å: –ü–æ–≤–µ—Ä—Ç–∞—î –æ–Ω–æ–≤–ª–µ–Ω–∏–π –≤—É–∑–æ–ª.
- üß† –ù–∞–≤—ñ—â–æ: –ó–∞–≤–µ—Ä—à—É—î –ª–æ–∫–∞–ª—å–Ω—É –æ–ø–µ—Ä–∞—Ü—ñ—é –∑–∞–º—ñ–Ω–∏.
- üìê –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–Ω–æ: –¶–µ –¥–æ–∑–≤–æ–ª—è—î –∑–±–µ—Ä–µ–≥—Ç–∏ –¥–µ—Ä–µ–≤–æ –±–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–±—É–¥–æ–≤—É–≤–∞–Ω–Ω—è.

–î–æ:
    10
   /
  5
 / \
2   7

‚Üí –í–∏–¥–∞–ª—è—î–º–æ 10

–ü—ñ—Å–ª—è:
    5
   / \
  2   7
  
  –ø–æ—á–∞—Ç –¥–µ—Ä–µ–≤–æ 
      10
   /
  5
 / \
2   7
—É –≤–∏–≥–ª—è–¥—ñ –æ–±—å–µ–∫—Ç–∞
{
  data: 10,
  left: {
    data: 5,
    left: { data: 2, left: null, right: null },
    right: { data: 7, left: null, right: null }
  },
  right: null
}

 current.data = current.left.data; - current.data —Å—Ç–∞—î 5.
 {
  data: 5,
  left: { data: 5, ... }, // —â–µ –Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–æ
  right: null
}

 current.right = current.left.right; - current.left.right ‚Äî —Ü–µ { data: 7 }
- —Ç–µ–ø–µ—Ä current.right = {data: 7}
–æ–±—å–µ–∫—Ç –∑–∞—Ä–∞–∑ –≤–∏–≥–ª—è–¥–∞—î —Ç–∞–∫ 
{
  data: 5,
  left: { data: 5, ... },
  right: { data: 7, left: null, right: null }
}
  
current.left = current.left.left;
- current.left.left ‚Äî —Ü–µ { data: 2 }
- –¢–µ–ø–µ—Ä current.left = { data: 2 }
{
  data: 5,
  left: { data: 2, left: null, right: null },
  right: { data: 7, left: null, right: null }
}

*/



